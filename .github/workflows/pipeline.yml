name: Build and deploy

on:
  push:
    branches: [ 'main', 'staging', 'develop' ]
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
    
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      # Get branch's name.
      - name: Branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
        
      # SonarCloud.
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      
      - name: Build and analyze with SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"vcamurati_shipping-service" /o:"vcamurati" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build src/
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
      # Build project with Maven
      - name: Build project
        run: mvn clean install
      
      # Build image.      
      - name: Build image
        run: docker build --build-arg JAR_FILE=./target/*-0.0.1-SNAPSHOT.jar -t ${{ secrets.DOCKER_USER }}/${{ env.BRANCH }}-shipping-service:latest .
      
      # Test reports.
      - name: Install NodeJs
        uses: actions/setup-node@v1
        with: 
          node-version: "12.x"
        
      - name: Install Newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra
      
      - name: Create directory test result
        run: mkdir -p Reports
        
     # - name: Run Postman collection
      #  run: newman run obligatorio.postman_collection.json -r htmlextra --reporter-htmlextra-export Reports/report.html --reporter-htmlextra-darkTheme  > Reports/report2.html
      
      - name: Reports details
        uses: actions/upload-artifact@v2
        with:
          name: ReportTest
          path: Reports
          
      # Docker Hub.
      - name: Login Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USER }}/${{ env.BRANCH }}-shipping-service
