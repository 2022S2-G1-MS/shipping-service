name: Build and deploy

on:
  push:
    branches: [ 'main', 'staging', 'develop' ]
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
     
      # Get branch's name.
      - name: Branch name
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
     
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
     
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
         java-version: '11'
         distribution: 'temurin'
         cache: maven
      
      # Cache packages.
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      # Verify project with Maven and analyze with SonarCloud.
      - name: Verify and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=2022S2-G1-MS_shipping-service
      
      # Build project with Maven.
      - name: Build project with Maven
        run: mvn clean package --file pom.xml
      
      # Build Docker image.      
      - name: Build image
        run: docker build --build-arg JAR_FILE=./target/*spring-boot.jar -t ${{ secrets.DOCKER_USER }}/${{ env.BRANCH }}-shipping-service:latest .
      
      # Test reports.
      - name: Install NodeJs
        uses: actions/setup-node@v1
        with: 
          node-version: "12.x"
        
      - name: Install Newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra
      
      - name: Create directory test result
        run: mkdir -p shipping-reports
        
     # - name: Run Postman collection
       # run: newman run "https://api.postman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}?access_key=${{ secrets.POSTMAN_API_KEY }}" -r htmlextra --reporter-htmlextra-export shipping-reports/report.html --reporter-htmlextra-darkTheme  > shipping-reports/report2.html
        #run: newman run "https://api.postman.com/collections/${{ secrets.POSTMAN_COLLECTION_ID }}?apikey=${{ secrets.POSTMAN_API_KEY }}"      
      
      - name: Reports details
        uses: actions/upload-artifact@v2
        with:
          name: shipping-reports
          path: shipping-reports
          
      # Docker Hub.
      - name: Login Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
        
      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USER }}/${{ env.BRANCH }}-shipping-service
          
  deploy:
    name: Deploy AWS
    needs: [build]
    runs-on: ubuntu-latest
    
    steps:
              
      # Deploy AWS ECS.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: testapp
          image: vcamurati/develop-shipping-service:latest
      
      - name: Deploy AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with: 
          task-definition: test-def.json
          service: test-service
          cluster: test-cluster
          wait-for-service-stability: true
